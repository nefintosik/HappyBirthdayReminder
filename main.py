import sqlite3
import logging
import pytz
import os
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.enums import ParseMode
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN=os.getenv('TOKEN')
GROUP_ID=os.getenv('GROUP_ID')
ADMIN_ID = int(os.getenv('ADMIN_ID'))
MOSCOW_TZ = pytz.timezone('Europe/Moscow')


bot = Bot(token=TOKEN)
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)


def escape_markdown(text: str) -> str:
    escape_chars = '_*[]()~`>#+-=|{}.!'
    return ''.join(['\\' + char if char in escape_chars else char for char in text])

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
conn = sqlite3.connect('birthdays.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS birthdays
               (id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                date TEXT NOT NULL)''')
conn.commit()

def is_admin(user_id: int) -> bool:
    return user_id == ADMIN_ID

def get_numbered_birthdays():
    cursor.execute("SELECT rowid, name, date FROM birthdays ORDER BY rowid")
    return cursor.fetchall()

@dp.message(Command("start"))
async def start_command(message: Message):
    if not is_admin(message.from_user.id):
        return
    
    help_text = (
        "üéâ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è:\n"
        "`/add –§–ò–û –î–î\\.–ú–ú\\.–ì–ì–ì–ì`\n\n"
        "‚ùå –£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è:\n"
        "`/remove –Ω–æ–º–µ—Ä`\n\n"
        "üìÖ –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π:\n"
        "`/list`\n\n"
        
    )
    await message.answer(help_text, parse_mode=ParseMode.MARKDOWN_V2)


@dp.message(Command("add"))
async def add_birthday(message: Message):
    if not is_admin(message.from_user.id):
        return

    try:
        _, *parts = message.text.split()
        date_str = parts[-1]
        name = ' '.join(parts[:-1])
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
        datetime.strptime(date_str, "%d.%m.%Y")
        
        cursor.execute("INSERT INTO birthdays (name, date) VALUES (?, ?)", (name, date_str))
        conn.commit()
        
        await message.answer(
            f"üéâ *{escape_markdown(name)}* –¥–æ–±–∞–≤–ª–µ–Ω\\(–∞\\)\\!\n–î–∞—Ç–∞: `{escape_markdown(date_str)}`", 
            parse_mode=ParseMode.MARKDOWN_V2
        )
    except Exception as e:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\\. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n`/add –§–ò–û –î–î\\.–ú–ú\\.–ì–ì–ì–ì`", 
            parse_mode=ParseMode.MARKDOWN_V2
        )

@dp.message(Command("list"))
async def list_birthdays(message: Message):
    if not is_admin(message.from_user.id):
        return
    
    birthdays = get_numbered_birthdays()
    if not birthdays:
        await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π –ø—É—Å—Ç")
        return
    
    response = "üìÖ *–°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π:*\n\n"
    for idx, (rowid, name, date) in enumerate(birthdays):
        response += f"üîπ *{idx}*: {escape_markdown(name)} \\- {escape_markdown(date)}\n"
    
    await message.answer(response, parse_mode=ParseMode.MARKDOWN_V2)

@dp.message(Command("remove"))
async def remove_birthday(message: Message):
    if not is_admin(message.from_user.id):
        return

    try:
        _, number_str = message.text.split()
        number = int(number_str)
        
        birthdays = get_numbered_birthdays()
        if number < 0 or number >= len(birthdays):
            raise ValueError
        
        rowid = birthdays[number][0]
        cursor.execute("DELETE FROM birthdays WHERE rowid = ?", (rowid,))
        conn.commit()
        
        await message.answer(f"‚úÖ –ó–∞–ø–∏—Å—å *{number}* —É–¥–∞–ª–µ–Ω–∞", parse_mode=ParseMode.MARKDOWN_V2)
    except:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä\\. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/list` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–æ–º–µ—Ä–æ–≤", parse_mode=ParseMode.MARKDOWN_V2)

async def check_birthdays():
    now = datetime.now(MOSCOW_TZ)
    today = now.date()
    
    for rowid, name, date_str in get_numbered_birthdays():
        try:
            birth_date = MOSCOW_TZ.localize(
                datetime.strptime(date_str, "%d.%m.%Y")
            ).date()
            
            next_date = birth_date.replace(year=today.year)
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 1 –¥–µ–Ω—å
            if (next_date - today).days == 1:
                msg = (
                    "üö® *–í–Ω–∏–º–∞–Ω–∏–µ\\!* –ó–∞–≤—Ç—Ä–∞ \\({}\\)\n"
                    "üéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É *{}*\\!\n"
                    "_–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å\\!_ üéÅ"
                ).format(
                    escape_markdown(next_date.strftime("%d.%m.%Y")),
                    escape_markdown(name)
                )
                await bot.send_message(GROUP_ID, msg, parse_mode=ParseMode.MARKDOWN_V2)
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
            if next_date == today:
                msg = (
                    "üéà *–°–µ–≥–æ–¥–Ω—è {}* –æ—Ç–º–µ—á–∞–µ—Ç –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è\\!\n"
                    "üéä –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –∏ –∂–µ–ª–∞–µ–º —Å—á–∞—Å—Ç—å—è\\! ü•≥"
                ).format(escape_markdown(name))
                await bot.send_message(GROUP_ID, msg, parse_mode=ParseMode.MARKDOWN_V2)
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è: {str(e)}")

async def main():
    scheduler = AsyncIOScheduler(timezone=MOSCOW_TZ)
    scheduler.add_job(check_birthdays, 'cron', hour=12, minute=0)
    scheduler.start()
    
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
